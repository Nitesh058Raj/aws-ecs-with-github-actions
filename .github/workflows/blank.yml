
name: CI/CD

# Triggers the workflow(pipeline)
on:
  push:
    branches: [ "main" ]  # main branch
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
       - name: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
         uses: actions/checkout@v3

      # If there is no Infra 
      # - name: Run Terraform to create Infra
      #   run: terraform apply
   
       - name: Configure AWS credentials
         uses: aws-actions/configure-aws-credentials@v1
         with:
           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
           aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
           aws-region: ap-south-1

       - name: Login to AWS ECR
         id: login-ecr                            # store as var like ansible
         uses: aws-actions/amazon-ecr-login@v1
         
     #  - name : Manual approch
     #    run: aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin <REPO_NAME>
          
  #     - name: Set ID variable
   #      run: |
    #       echo "::set-env name=id::${{ github.sha }}"
     #      echo "ID set to ${{ github.sha }}"

       - name: Build and push Docker image
         id: build-image
         uses: docker/build-push-action@v2
         with:
           context: .
           push: true
           tags: ${{ secrets.REPO_NAME }}:${{ github.sha }}   # sha will generate unique tag every time
             
       - name: Terraform apply
         env:
           AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
           AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
           REPO_NAME: ${{ secrets.REPO_NAME }}
           TAG: ${{ github.sha }}
         run: |
          cd terra-ecs && terraform init && terraform destroy -auto-approve -input=false && terraform apply -var="AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" -var="AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" -var="REPO_NAME=${{ secrets.REPO_NAME }}" -var="TAG=${{ github.sha }}"  --auto-approve 
          
